plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Keystore configs
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('fastlane/key/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.tmi.brainup"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        applicationId = "com.tmi.brainup"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    flavorDimensions "default"

    productFlavors {
        develop {
            manifestPlaceholders = [applicationName: "DEV Chammy"]
            applicationIdSuffix ".dev"
            dimension "default"
        }
        staging {
            manifestPlaceholders = [applicationName: "STG Chammy"]
            applicationIdSuffix ".stg"
            dimension "default"
        }
        production {
            manifestPlaceholders = [applicationName: "Chammy"]
            dimension "default"
        }
    }

    signingConfigs {
        dev {
            keyAlias keystoreProperties['devKeyAlias']
            keyPassword keystoreProperties['devKeyPassword']
            storeFile keystoreProperties['devStoreFile'] ? file(keystoreProperties['devStoreFile']) : null
            storePassword keystoreProperties['devStorePassword']
        }

        stg {
            keyAlias keystoreProperties['stgKeyAlias']
            keyPassword keystoreProperties['stgKeyPassword']
            storeFile keystoreProperties['stgStoreFile'] ? file(keystoreProperties['stgStoreFile']) : null
            storePassword keystoreProperties['stgStorePassword']
        }

        prod {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.dev
        }

        release {
            minifyEnabled true
            shrinkResources true

            signingConfig = signingConfigs.dev
            productFlavors.develop.signingConfig signingConfigs.dev
            productFlavors.staging.signingConfig signingConfigs.stg
            productFlavors.production.signingConfig signingConfigs.prod
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}
